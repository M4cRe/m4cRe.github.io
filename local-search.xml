<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Reverse Learning - Day5</title>
    <link href="/2022/04/02/Reverse-Learning-Day5/"/>
    <url>/2022/04/02/Reverse-Learning-Day5/</url>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><h1 id="BUUCTF"><a href="#BUUCTF" class="headerlink" title="BUUCTF"></a>BUUCTF</h1><h3 id="JustRE"><a href="#JustRE" class="headerlink" title="JustRE"></a>JustRE</h3><p>BJDCTF2020的签到题，查看字符串，定位到代码</p><p><img src="https://m4cre-1309984225.cos.ap-beijing.myqcloud.com/typora/202204020223948.png"></p><p><img src="https://m4cre-1309984225.cos.ap-beijing.myqcloud.com/typora/202204020224444.png"></p><p>将19999和0填入%d，获得flag{1999902069a45792d233ac}</p><h3 id="简单的注册器"><a href="#简单的注册器" class="headerlink" title="简单的注册器"></a>简单的注册器</h3><p>jadx打开apk文件，找到Main函数，开始分析代码</p><p><img src="https://m4cre-1309984225.cos.ap-beijing.myqcloud.com/typora/202204020240801.png"></p><p>String xx为32位的flag，最后一位是‘a’，第2位是‘b’，第1位 + 第3位 - 48 &#x3D; 56 </p><p>第3，5，31，15位经过加密重新赋值</p><p>最后进一遍循环,把前16位和后16位颠倒</p><p>手算也可以，直接跑脚本</p><figure class="highlight python"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><pre><code class="hljs python">Str = <span class="hljs-string">&#x27;40c04462b4dd7c450528835cca15&#x27;</span><br>x = [i <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> Str]<br>x[<span class="hljs-number">2</span>] = <span class="hljs-built_in">chr</span>(<span class="hljs-built_in">ord</span>(x[<span class="hljs-number">2</span>]) + <span class="hljs-built_in">ord</span>(x[<span class="hljs-number">3</span>]) - <span class="hljs-number">50</span>)<br>x[<span class="hljs-number">4</span>] = <span class="hljs-built_in">chr</span>(<span class="hljs-built_in">ord</span>(x[<span class="hljs-number">2</span>]) + <span class="hljs-built_in">ord</span>(x[<span class="hljs-number">5</span>]) - <span class="hljs-number">48</span>)<br>x[<span class="hljs-number">30</span>] = <span class="hljs-built_in">chr</span>(<span class="hljs-built_in">ord</span>(x[<span class="hljs-number">31</span>]) + <span class="hljs-built_in">ord</span>(x[<span class="hljs-number">9</span>]) - <span class="hljs-number">48</span>)<br>x[<span class="hljs-number">14</span>] = <span class="hljs-built_in">chr</span>(<span class="hljs-built_in">ord</span>(x[<span class="hljs-number">27</span>]) + <span class="hljs-built_in">ord</span>(x[<span class="hljs-number">28</span>]) - <span class="hljs-number">97</span>)<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">16</span>):<br>  x[i],x[<span class="hljs-number">31</span>-i] = x[<span class="hljs-number">31</span>-i],x[i]<br>  <br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;flag&#123;&quot;</span>+<span class="hljs-string">&#x27;&#x27;</span>.join(x)+<span class="hljs-string">&quot;&#125;&quot;</span>)<br></code></pre></td></tr></table></figure><p>flag{59acc538825054c7de4b26440c0999dd}</p><h3 id="pyre"><a href="#pyre" class="headerlink" title="pyre"></a>pyre</h3><p>pyc文件，直接进行反编译</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span> <span class="hljs-string">&#x27;Welcome to Re World!&#x27;</span><br><span class="hljs-built_in">print</span> <span class="hljs-string">&#x27;Your input1 is your flag~&#x27;</span><br>l = <span class="hljs-built_in">len</span>(input1)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(l):<br>    num = ((input1[i] + i) % <span class="hljs-number">128</span> + <span class="hljs-number">128</span>) % <span class="hljs-number">128</span><br>    code += num<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(l - <span class="hljs-number">1</span>):<br>    code[i] = code[i] ^ code[(i + <span class="hljs-number">1</span>)]<br><br><span class="hljs-built_in">print</span> code<br>code = [<span class="hljs-string">&#x27;\x1f&#x27;</span>, <span class="hljs-string">&#x27;\x12&#x27;</span>, <span class="hljs-string">&#x27;\x1d&#x27;</span>, <span class="hljs-string">&#x27;(&#x27;</span>, <span class="hljs-string">&#x27;0&#x27;</span>, <span class="hljs-string">&#x27;4&#x27;</span>, <span class="hljs-string">&#x27;\x01&#x27;</span>, <span class="hljs-string">&#x27;\x06&#x27;</span>, <span class="hljs-string">&#x27;\x14&#x27;</span>, <span class="hljs-string">&#x27;4&#x27;</span>, <span class="hljs-string">&#x27;,&#x27;</span>,<br>        <span class="hljs-string">&#x27;\x1b&#x27;</span>, <span class="hljs-string">&#x27;U&#x27;</span>, <span class="hljs-string">&#x27;?&#x27;</span>, <span class="hljs-string">&#x27;o&#x27;</span>, <span class="hljs-string">&#x27;6&#x27;</span>, <span class="hljs-string">&#x27;*&#x27;</span>, <span class="hljs-string">&#x27;:&#x27;</span>, <span class="hljs-string">&#x27;\x01&#x27;</span>, <span class="hljs-string">&#x27;D&#x27;</span>, <span class="hljs-string">&#x27;;&#x27;</span>, <span class="hljs-string">&#x27;%&#x27;</span>, <span class="hljs-string">&#x27;\x13&#x27;</span>]<br></code></pre></td></tr></table></figure><p>这道题主要考的的是模运算</p><p>(a+b)%c &#x3D; (a%c+b%c)%c </p><p>所以代码中的((input1[i] + i) % 128 + 128) % 128可以转换成(input1[i] + i) % 128</p><p>下面就是一个基本的异或</p><p>直接开始写脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">code = [<span class="hljs-string">&#x27;\x1f&#x27;</span>, <span class="hljs-string">&#x27;\x12&#x27;</span>, <span class="hljs-string">&#x27;\x1d&#x27;</span>, <span class="hljs-string">&#x27;(&#x27;</span>, <span class="hljs-string">&#x27;0&#x27;</span>, <span class="hljs-string">&#x27;4&#x27;</span>, <span class="hljs-string">&#x27;\x01&#x27;</span>, <span class="hljs-string">&#x27;\x06&#x27;</span>, <span class="hljs-string">&#x27;\x14&#x27;</span>, <span class="hljs-string">&#x27;4&#x27;</span>, <span class="hljs-string">&#x27;,&#x27;</span>,<br>        <span class="hljs-string">&#x27;\x1b&#x27;</span>, <span class="hljs-string">&#x27;U&#x27;</span>, <span class="hljs-string">&#x27;?&#x27;</span>, <span class="hljs-string">&#x27;o&#x27;</span>, <span class="hljs-string">&#x27;6&#x27;</span>, <span class="hljs-string">&#x27;*&#x27;</span>, <span class="hljs-string">&#x27;:&#x27;</span>, <span class="hljs-string">&#x27;\x01&#x27;</span>, <span class="hljs-string">&#x27;D&#x27;</span>, <span class="hljs-string">&#x27;;&#x27;</span>, <span class="hljs-string">&#x27;%&#x27;</span>, <span class="hljs-string">&#x27;\x13&#x27;</span>]<br>flag = <span class="hljs-string">&#x27;&#x27;</span><br>l = <span class="hljs-built_in">len</span>(code)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(l-<span class="hljs-number">2</span>,-<span class="hljs-number">1</span>,-<span class="hljs-number">1</span>):<br>  code[i] = <span class="hljs-built_in">chr</span>(<span class="hljs-built_in">ord</span>(code[i]) ^ <span class="hljs-built_in">ord</span>(code[(i+<span class="hljs-number">1</span>)]))<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(l):<br>    flag += <span class="hljs-built_in">chr</span>((<span class="hljs-built_in">ord</span>(code[i])-i)%<span class="hljs-number">128</span>)<br><span class="hljs-built_in">print</span>(flag)<br></code></pre></td></tr></table></figure><p>flag{Just_Re_1s_Ha66y!}</p><h3 id="easyre"><a href="#easyre" class="headerlink" title="easyre"></a>easyre</h3><p>upx去壳</p><p><img src="https://m4cre-1309984225.cos.ap-beijing.myqcloud.com/typora/202204020330242.png"></p><p>分析一下main函数</p><p><img src="https://m4cre-1309984225.cos.ap-beijing.myqcloud.com/typora/202204020332078.png"></p><p>v4 &#x3D; ‘’*F’&quot;N,&quot;(I?+@”  v6是ACTF{}  v7，v8，v9赋值给v5的前三位</p><p>观察循环体，知道flag为12位</p><p>主要就是分析一下_data_start__这个函数</p><p><img src="https://m4cre-1309984225.cos.ap-beijing.myqcloud.com/typora/202204020339312.png"></p><p>意思是在这串字符中查找v4的字符，方法是字符下标-1等于v4字符的ASCII码</p><p>开始写脚本（ ‘前要加上\进行转译）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">key = <span class="hljs-string">&#x27;~&#125;|&#123;zyxwvutsrqponmlkjihgfedcba`_^]\[ZYXWVUTSRQPONMLKJIHGFEDCBA@?&gt;=&lt;;:9876543210/.-,+*)(\&#x27;&amp;%$# !&quot;&#x27;</span>  <br>v4 = [<span class="hljs-number">42</span>,<span class="hljs-number">70</span>,<span class="hljs-number">39</span>,<span class="hljs-number">34</span>,<span class="hljs-number">78</span>,<span class="hljs-number">44</span>,<span class="hljs-number">34</span>,<span class="hljs-number">40</span>,<span class="hljs-number">73</span>,<span class="hljs-number">63</span>,<span class="hljs-number">43</span>,<span class="hljs-number">64</span>]<br>x = []<br>flag = <span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> v4:<br>  x.append(key.find(<span class="hljs-built_in">chr</span>(i))+<span class="hljs-number">1</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> x:<br>  flag += <span class="hljs-built_in">chr</span>(i)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;flag&#123;&quot;</span>+flag+<span class="hljs-string">&quot;&#125;&quot;</span>)<br></code></pre></td></tr></table></figure><p>flag{U9X_1S_W6@T?}</p><hr><p>Day5 - apk文件分析，pyc反汇编，模运算</p>]]></content>
    
    
    <categories>
      
      <category>Reverse Learn</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Reverse</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Reverse Learning - Day4</title>
    <link href="/2022/03/31/Reverse-Learning-Day4/"/>
    <url>/2022/03/31/Reverse-Learning-Day4/</url>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><h1 id="BUUCTF"><a href="#BUUCTF" class="headerlink" title="BUUCTF"></a>BUUCTF</h1><h3 id="刮开有奖"><a href="#刮开有奖" class="headerlink" title="刮开有奖"></a>刮开有奖</h3><p>这是一道相对复杂的题，打开题目看到WinMain函数</p><p><img src="https://m4cre-1309984225.cos.ap-beijing.myqcloud.com/typora/202203312028986.png"></p><p>查看DiaogFunc函数，里面是程序的加密过程，需要仔细分析</p><figure class="highlight c"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></div></td><td class="code"><pre><code class="hljs c">INT_PTR __stdcall <span class="hljs-title function_">DialogFunc</span><span class="hljs-params">(HWND hDlg, UINT a2, WPARAM a3, LPARAM a4)</span><br>&#123;<br>  <span class="hljs-type">const</span> <span class="hljs-type">char</span> *v4; <span class="hljs-comment">// esi</span><br>  <span class="hljs-type">const</span> <span class="hljs-type">char</span> *v5; <span class="hljs-comment">// edi</span><br>  <span class="hljs-type">int</span> v7[<span class="hljs-number">2</span>]; <span class="hljs-comment">// [esp+8h] [ebp-20030h] BYREF</span><br>  <span class="hljs-type">int</span> v8; <span class="hljs-comment">// [esp+10h] [ebp-20028h]</span><br>  <span class="hljs-type">int</span> v9; <span class="hljs-comment">// [esp+14h] [ebp-20024h]</span><br>  <span class="hljs-type">int</span> v10; <span class="hljs-comment">// [esp+18h] [ebp-20020h]</span><br>  <span class="hljs-type">int</span> v11; <span class="hljs-comment">// [esp+1Ch] [ebp-2001Ch]</span><br>  <span class="hljs-type">int</span> v12; <span class="hljs-comment">// [esp+20h] [ebp-20018h]</span><br>  <span class="hljs-type">int</span> v13; <span class="hljs-comment">// [esp+24h] [ebp-20014h]</span><br>  <span class="hljs-type">int</span> v14; <span class="hljs-comment">// [esp+28h] [ebp-20010h]</span><br>  <span class="hljs-type">int</span> v15; <span class="hljs-comment">// [esp+2Ch] [ebp-2000Ch]</span><br>  <span class="hljs-type">int</span> v16; <span class="hljs-comment">// [esp+30h] [ebp-20008h]</span><br>  CHAR String[<span class="hljs-number">65536</span>]; <span class="hljs-comment">// [esp+34h] [ebp-20004h] BYREF</span><br>  <span class="hljs-type">char</span> v18[<span class="hljs-number">65536</span>]; <span class="hljs-comment">// [esp+10034h] [ebp-10004h] BYREF</span><br><br>  <span class="hljs-keyword">if</span> ( a2 == <span class="hljs-number">272</span> )      <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>  <span class="hljs-keyword">if</span> ( a2 != <span class="hljs-number">273</span> )<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">if</span> ( (_WORD)a3 == <span class="hljs-number">1001</span> )    <span class="hljs-comment">// a2 = 273,a3 = 1001 </span><br>  &#123;<br>    <span class="hljs-built_in">memset</span>(String, <span class="hljs-number">0</span>, <span class="hljs-number">0xFFFF</span>u); <span class="hljs-comment">// 将String清零</span><br>    GetDlgItemTextA(hDlg, <span class="hljs-number">1000</span>, String, <span class="hljs-number">0xFFFF</span>); <span class="hljs-comment">// 赋值 </span><br>    <span class="hljs-keyword">if</span> ( <span class="hljs-built_in">strlen</span>(String) == <span class="hljs-number">8</span> ) <span class="hljs-comment">// string位数为8位，大胆猜测为flag</span><br>    &#123;<br>      v7[<span class="hljs-number">0</span>] = <span class="hljs-number">90</span>;<br>      v7[<span class="hljs-number">1</span>] = <span class="hljs-number">74</span>;<br>      v8 = <span class="hljs-number">83</span>; <span class="hljs-comment">// v7[2]</span><br>      v9 = <span class="hljs-number">69</span>; <span class="hljs-comment">// v7[3]</span><br>      v10 = <span class="hljs-number">67</span>; <span class="hljs-comment">// v7[4]</span><br>      v11 = <span class="hljs-number">97</span>; <span class="hljs-comment">// v7[5]</span><br>      v12 = <span class="hljs-number">78</span>; <span class="hljs-comment">// v7[6] </span><br>      v13 = <span class="hljs-number">72</span>; <span class="hljs-comment">// v7[7]</span><br>      v14 = <span class="hljs-number">51</span>; <span class="hljs-comment">// v7[8]</span><br>      v15 = <span class="hljs-number">110</span>; <span class="hljs-comment">// v7[9]</span><br>      v16 = <span class="hljs-number">103</span>; <span class="hljs-comment">// v7[10]</span><br>      sub_4010F0(v7, <span class="hljs-number">0</span>, <span class="hljs-number">10</span>);   <span class="hljs-comment">// sub_4010F0函数对v7进行处理</span><br>      <span class="hljs-built_in">memset</span>(v18, <span class="hljs-number">0</span>, <span class="hljs-number">0xFFFF</span>u);<br>      v18[<span class="hljs-number">0</span>] = String[<span class="hljs-number">5</span>];  <br>      v18[<span class="hljs-number">2</span>] = String[<span class="hljs-number">7</span>];<br>      v18[<span class="hljs-number">1</span>] = String[<span class="hljs-number">6</span>];  <span class="hljs-comment">// 取string的第5，7，6位赋值给v18</span><br>      v4 = (<span class="hljs-type">const</span> <span class="hljs-type">char</span> *)sub_401000(v18, <span class="hljs-built_in">strlen</span>(v18)); <span class="hljs-comment">//sub_401000对v18加密赋值给v4</span><br>      <span class="hljs-built_in">memset</span>(v18, <span class="hljs-number">0</span>, <span class="hljs-number">0xFFFF</span>u);<br>      v18[<span class="hljs-number">1</span>] = String[<span class="hljs-number">3</span>];  <br>      v18[<span class="hljs-number">0</span>] = String[<span class="hljs-number">2</span>];<br>      v18[<span class="hljs-number">2</span>] = String[<span class="hljs-number">4</span>];  <span class="hljs-comment">// 取v18的第3，2，4位</span><br>      v5 = (<span class="hljs-type">const</span> <span class="hljs-type">char</span> *)sub_401000(v18, <span class="hljs-built_in">strlen</span>(v18));  <span class="hljs-comment">// 同理赋值给v5</span><br>      <span class="hljs-keyword">if</span> ( String[<span class="hljs-number">0</span>] == v7[<span class="hljs-number">0</span>] + <span class="hljs-number">34</span> <span class="hljs-comment">// flag第一位</span><br>        &amp;&amp; String[<span class="hljs-number">1</span>] == v10  <span class="hljs-comment">// flag第二位 </span><br>        &amp;&amp; <span class="hljs-number">4</span> * String[<span class="hljs-number">2</span>] - <span class="hljs-number">141</span> == <span class="hljs-number">3</span> * v8<br>        &amp;&amp; String[<span class="hljs-number">3</span>] / <span class="hljs-number">4</span> == <span class="hljs-number">2</span> * (v13 / <span class="hljs-number">9</span>)<br>        &amp;&amp; !<span class="hljs-built_in">strcmp</span>(v4, <span class="hljs-string">&quot;ak1w&quot;</span>)  <span class="hljs-comment">// v4 = &#x27;aklw&#x27;</span><br>        &amp;&amp; !<span class="hljs-built_in">strcmp</span>(v5, <span class="hljs-string">&quot;V1Ax&quot;</span>) )  <span class="hljs-comment">// v5 = &#x27;V1Ax&#x27;</span><br>      &#123;<br>        MessageBoxA(hDlg, <span class="hljs-string">&quot;U g3t 1T!&quot;</span>, <span class="hljs-string">&quot;@_@&quot;</span>, <span class="hljs-number">0</span>);<br>      &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>  &#125;<br>  <span class="hljs-keyword">if</span> ( (_WORD)a3 != <span class="hljs-number">1</span> &amp;&amp; (_WORD)a3 != <span class="hljs-number">2</span> )<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>  EndDialog(hDlg, (<span class="hljs-type">unsigned</span> __int16)a3);<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>经过分析我们先要理清思路</p><ol><li>flag为8位</li><li>算出经过sub_4010F0函数处理后的v7字符串是多少</li><li>将v4和v5逆运算得出结果，即可知道flag后六位是多少</li><li>将flag前两位组合及获得最后flag</li></ol><p>先从简单的入手，直接看sub_401000函数</p><p><img src="https://m4cre-1309984225.cos.ap-beijing.myqcloud.com/typora/202203312052710.png"></p><p>查看这个byte_407830里有啥</p><p><img src="https://m4cre-1309984225.cos.ap-beijing.myqcloud.com/typora/202203312052512.png"></p><p>很明显是一个base64的加密，直接对v4，v5进行解密</p><p>v4 &#x3D;  ‘jMp’  v5 &#x3D; ‘WP1’</p><p>重新排序string[2,3,4,5,6] &#x3D; ‘WP1jMp’</p><p>接着分析sub_4010F0函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> __cdecl <span class="hljs-title function_">sub_4010F0</span><span class="hljs-params">(<span class="hljs-type">int</span> a1, <span class="hljs-type">int</span> a2, <span class="hljs-type">int</span> a3)</span><br>&#123;<br>  <span class="hljs-type">int</span> result; <span class="hljs-comment">// eax</span><br>  <span class="hljs-type">int</span> i; <span class="hljs-comment">// esi</span><br>  <span class="hljs-type">int</span> v5; <span class="hljs-comment">// ecx</span><br>  <span class="hljs-type">int</span> v6; <span class="hljs-comment">// edx</span><br><br>  result = a3;<br>  <span class="hljs-keyword">for</span> ( i = a2; i &lt;= a3; a2 = i )<br>  &#123;<br>    v5 = <span class="hljs-number">4</span> * i;<br>    v6 = *(_DWORD *)(<span class="hljs-number">4</span> * i + a1);<br>    <span class="hljs-keyword">if</span> ( a2 &lt; result &amp;&amp; i &lt; result )<br>    &#123;<br>      <span class="hljs-keyword">do</span><br>      &#123;<br>        <span class="hljs-keyword">if</span> ( v6 &gt; *(_DWORD *)(a1 + <span class="hljs-number">4</span> * result) )<br>        &#123;<br>          <span class="hljs-keyword">if</span> ( i &gt;= result )<br>            <span class="hljs-keyword">break</span>;<br>          ++i;<br>          *(_DWORD *)(v5 + a1) = *(_DWORD *)(a1 + <span class="hljs-number">4</span> * result);<br>          <span class="hljs-keyword">if</span> ( i &gt;= result )<br>            <span class="hljs-keyword">break</span>;<br>          <span class="hljs-keyword">while</span> ( *(_DWORD *)(a1 + <span class="hljs-number">4</span> * i) &lt;= v6 )<br>          &#123;<br>            <span class="hljs-keyword">if</span> ( ++i &gt;= result )<br>              <span class="hljs-keyword">goto</span> LABEL_13;<br>          &#125;<br>          <span class="hljs-keyword">if</span> ( i &gt;= result )<br>            <span class="hljs-keyword">break</span>;<br>          v5 = <span class="hljs-number">4</span> * i;<br>          *(_DWORD *)(a1 + <span class="hljs-number">4</span> * result) = *(_DWORD *)(<span class="hljs-number">4</span> * i + a1);<br>        &#125;<br>        --result;<br>      &#125;<br>      <span class="hljs-keyword">while</span> ( i &lt; result );<br>    &#125;<br>LABEL_13:<br>    *(_DWORD *)(a1 + <span class="hljs-number">4</span> * result) = v6;<br>    sub_4010F0(a1, a2, i - <span class="hljs-number">1</span>);<br>    result = a3;<br>    ++i;<br>  &#125;<br>  <span class="hljs-keyword">return</span> result;<br>&#125;<br></code></pre></td></tr></table></figure><p>emmmm，直接换成C语言跑一遍。将所有的*(_DWORD *)删去，并把汇编代码的基本地址+偏移都改成寻址（具体也是在网上看的师傅们的wp，TAT还是太菜）还是决定自己尝试分析下，代码如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">sub_4010F0</span><span class="hljs-params">(<span class="hljs-type">char</span>*a1,<span class="hljs-type">int</span> a2,<span class="hljs-type">int</span> a3)</span> <span class="hljs-comment">// a1是v7的地址 a2=0 a3=10</span><br>&#123;<br><span class="hljs-type">int</span> result; <br><span class="hljs-type">int</span> i;<br><span class="hljs-type">int</span> v5;<br><span class="hljs-type">int</span> v6;<br><br>result=a3; <span class="hljs-comment">// result = 10</span><br><span class="hljs-keyword">for</span>(i=a2;i&lt;=a3;a2=i)  <span class="hljs-comment">// i=0 i&lt;=10 a2=i</span><br>&#123;<br>v5=i;<br>v6=a1[i];   <span class="hljs-comment">// 遍历a1里的元素</span><br><span class="hljs-keyword">if</span>(a2&lt;result&amp;&amp;i&lt;result) <span class="hljs-comment">// a2 &lt; 10 &amp; i &lt; 10</span><br>&#123;<br><span class="hljs-keyword">do</span><br>&#123;<br><span class="hljs-keyword">if</span>(v6&gt;a1[result]) <span class="hljs-comment">// a1[i] &gt; a1[result]</span><br>&#123;<br><span class="hljs-keyword">if</span>(i&gt;=result) <br><span class="hljs-keyword">break</span>;<br>++i;<br>a1[v5]=a1[result];<br><span class="hljs-keyword">if</span>(i&gt;=result)<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">while</span>(a1[i]&lt;=v6)  <span class="hljs-comment">// a1[i] &lt;= v6进入循环</span><br>&#123;<br><span class="hljs-keyword">if</span>(++i&gt;=result)<br><span class="hljs-keyword">goto</span> LABEL_13;<br>&#125;<br><span class="hljs-keyword">if</span>(i&gt;=result)<br><span class="hljs-keyword">break</span>;  <br>v5=i;<br>a1[result]=a1[i];<br>&#125;<br>--result;  <span class="hljs-comment">// result - 1 </span><br>&#125;<br><span class="hljs-keyword">while</span>(i&lt;result); <br>&#125;<br>LABEL_13:<br>a1[result]=v6;<br>sub_4010F0(a1,a2,i<span class="hljs-number">-1</span>); <span class="hljs-comment">//递归</span><br>result=a3;<br>++i;<br>&#125;<br><span class="hljs-keyword">return</span> result;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br><span class="hljs-type">char</span> str[]=<span class="hljs-string">&quot;ZJSECaNH3ng&quot;</span>; <br>sub_4010F0(str,<span class="hljs-number">0</span>,<span class="hljs-number">10</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s&quot;</span>,str);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>得到结果v7[ ] &#x3D; ‘3CEHJNSZagn’</p><p>String[0] &#x3D;&#x3D; v7[0] + 34 第一位就是51+34&#x3D;85  ‘U’</p><p>String[1] &#x3D;&#x3D; v10 ( v7[4] )  ‘J’</p><p>最后flag{UJWP1jMp}</p><hr><p>Day4 - 多段加密要分开分析，常用函数敏感性，要有耐心TAT</p>]]></content>
    
    
    <categories>
      
      <category>Reverse Learn</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Reverse</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Reverse Learning - Day3</title>
    <link href="/2022/03/29/Reverse-Learning-Day3/"/>
    <url>/2022/03/29/Reverse-Learning-Day3/</url>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><h1 id="BUUCTF"><a href="#BUUCTF" class="headerlink" title="BUUCTF"></a>BUUCTF</h1><h3 id="不一样的flag"><a href="#不一样的flag" class="headerlink" title="不一样的flag"></a>不一样的flag</h3><p>IDA分析一下main函数，有一串字符串，还有上下左右四个方向</p><p><img src="https://m4cre-1309984225.cos.ap-beijing.myqcloud.com/typora/202203291637538.png"></p><p>再接着分析代码，发现遇到1退出，遇到#获得flag，猜测是5*5的迷宫</p><p><img src="https://m4cre-1309984225.cos.ap-beijing.myqcloud.com/typora/202203291649693.png"></p><figure class="highlight php"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><pre><code class="hljs php">*<span class="hljs-number">1111</span><br><span class="hljs-number">01000</span><br><span class="hljs-number">01010</span><br><span class="hljs-number">00010</span><br><span class="hljs-number">1111</span><span class="hljs-comment">#</span><br></code></pre></td></tr></table></figure><p>flag{222441144222}</p><h3 id="SimpleRev"><a href="#SimpleRev" class="headerlink" title="SimpleRev"></a>SimpleRev</h3><p>看一下main函数</p><p><img src="https://m4cre-1309984225.cos.ap-beijing.myqcloud.com/typora/202203291719183.png"></p><p>主要分析一下Decry()</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs c">v11 = __readfsqword(<span class="hljs-number">0x28</span>u);<br> *(_QWORD *)src = <span class="hljs-number">0x534C43444E</span>LL; <span class="hljs-comment">//转为字符为&#x27;NDCLS&#x27;</span><br> v7 = <span class="hljs-number">0LL</span>;<br> v8 = <span class="hljs-number">0</span>;<br> v9[<span class="hljs-number">0</span>] = <span class="hljs-number">0x776F646168</span>LL; <span class="hljs-comment">//转为字符为&#x27;hadow&#x27;</span><br> v9[<span class="hljs-number">1</span>] = <span class="hljs-number">0LL</span>;<br> v10 = <span class="hljs-number">0</span>;<br> text = (<span class="hljs-type">char</span> *)join(key3, v9); <span class="hljs-comment">//jion连接字符串&#x27;killshadow&#x27;</span><br> <span class="hljs-built_in">strcpy</span>(key, key1); <span class="hljs-comment">//key1 = &#x27;ADSFK&#x27;</span><br> <span class="hljs-built_in">strcat</span>(key, src); <span class="hljs-comment">//相连为&#x27;ADSFKNDCLS&#x27;</span><br> v2 = <span class="hljs-number">0</span>;<br> v3 = <span class="hljs-number">0</span>;<br> getchar();<br> v5 = <span class="hljs-built_in">strlen</span>(key); <span class="hljs-comment">//v5 = 10</span><br> <span class="hljs-keyword">for</span> ( i = <span class="hljs-number">0</span>; i &lt; v5; ++i )<br> &#123;<br>   <span class="hljs-keyword">if</span> ( key[v3 % v5] &gt; <span class="hljs-string">&#x27;@&#x27;</span> &amp;&amp; key[v3 % v5] &lt;= <span class="hljs-string">&#x27;Z&#x27;</span> ) <span class="hljs-comment">//转为小写</span><br>     key[i] = key[v3 % v5] + <span class="hljs-string">&#x27; &#x27;</span>;<br>   ++v3;<br> &#125;<br> <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Please input your flag:&quot;</span>);<br> <span class="hljs-keyword">while</span> ( <span class="hljs-number">1</span> )<br> &#123;<br>   v1 = getchar();<br>   <span class="hljs-keyword">if</span> ( v1 == <span class="hljs-number">10</span> )<br>     <span class="hljs-keyword">break</span>;<br>   <span class="hljs-keyword">if</span> ( v1 == <span class="hljs-number">32</span> )<br>   &#123;<br>     ++v2;<br>   &#125;<br>   <span class="hljs-keyword">else</span><br>   &#123;<br>      <span class="hljs-keyword">if</span> ( v1 &lt;= <span class="hljs-number">96</span> || v1 &gt; <span class="hljs-number">122</span> )<br>     &#123;<br>       <span class="hljs-keyword">if</span> ( v1 &gt; <span class="hljs-number">64</span> &amp;&amp; v1 &lt;= <span class="hljs-number">90</span> )<br>       &#123;<br>         str2[v2] = (v1 - <span class="hljs-number">39</span> - key[v3 % v5] + <span class="hljs-number">97</span>) % <span class="hljs-number">26</span> + <span class="hljs-number">97</span>;<span class="hljs-comment">// 加密算法</span><br>         ++v3;<br>       &#125;<br>     &#125;<br>     <span class="hljs-keyword">else</span><br>     &#123;<br>        str2[v2] = (v1 - <span class="hljs-number">39</span> - key[v3 % v5] + <span class="hljs-number">97</span>) % <span class="hljs-number">26</span> + <span class="hljs-number">97</span>;<br>       ++v3;<br>     &#125;<br>     <span class="hljs-keyword">if</span> ( !(v3 % v5) )<br>       <span class="hljs-built_in">putchar</span>(<span class="hljs-string">&#x27; &#x27;</span>);<br>     ++v2;<br>   &#125;<br> &#125;<br> <span class="hljs-keyword">if</span> ( !<span class="hljs-built_in">strcmp</span>(text, str2) )<br>   <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Congratulation!\n&quot;</span>);<br> <span class="hljs-keyword">else</span><br>   <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Try again!\n&quot;</span>);<br> <span class="hljs-keyword">return</span> __readfsqword(<span class="hljs-number">0x28</span>u) ^ v11;<br></code></pre></td></tr></table></figure><p>str2是我们需要的flag，str2和text进行比较，二者相等即成功</p><p>重要的只是str2[v2] &#x3D; (v1 - 39 - key[v3 % v5] + 97) % 26 + 97这个式子，直接写脚本逆推</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python">text = <span class="hljs-string">&#x27;killshadow&#x27;</span><br>key = <span class="hljs-string">&#x27;adsfkndcls&#x27;</span><br>v3 = <span class="hljs-number">0</span><br>v5 = <span class="hljs-number">10</span><br>n = <span class="hljs-number">0</span><br>flag = [<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-number">10</span>):<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-number">10</span>):<br>        v1=(<span class="hljs-built_in">ord</span>(text[j])-<span class="hljs-number">97</span>)+<span class="hljs-number">26</span>*i+<span class="hljs-built_in">ord</span>(key[v3%v5])-<span class="hljs-number">58</span><br>        <span class="hljs-keyword">if</span>(v1&gt;<span class="hljs-number">65</span> <span class="hljs-keyword">and</span> v1&lt;=<span class="hljs-number">90</span>) <span class="hljs-keyword">or</span> (v1&gt;=<span class="hljs-number">97</span> <span class="hljs-keyword">and</span> v5&lt;=<span class="hljs-number">122</span>):<br>            flag[j]=<span class="hljs-built_in">chr</span>(v1)<br>            n = n+<span class="hljs-number">1</span><br>            <span class="hljs-keyword">if</span>(n==<span class="hljs-number">10</span>):<br>                <span class="hljs-built_in">print</span>(flag)<br>                <span class="hljs-keyword">break</span><br>        v3=v3+<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>flag{KLDQCUDFZO}</p><p>此题中数据转为16进制在内存中是小端顺序，所以高位在高地址，故顺序需要颠倒</p><ul><li>大端顺序：高字节保存在内存的低地址</li><li>小端顺序：高字节保存在内存的高地址</li></ul><p>如何记忆？</p><p>自大的人眼高手低 - 其中，自大代表大端序，眼高代表高地址，手低代表低字节</p><p>小端顺序则相反</p><h3 id="Java逆向解密"><a href="#Java逆向解密" class="headerlink" title="Java逆向解密"></a>Java逆向解密</h3><p>jadx打开java文件，直接分析加密过程</p><p><img src="https://m4cre-1309984225.cos.ap-beijing.myqcloud.com/typora/202203291852788.png"></p><p>是将输入的字符+‘@’再与32异或，直接写脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">key = [<span class="hljs-number">180</span>, <span class="hljs-number">136</span>, <span class="hljs-number">137</span>, <span class="hljs-number">147</span>, <span class="hljs-number">191</span>, <span class="hljs-number">137</span>, <span class="hljs-number">147</span>, <span class="hljs-number">191</span>, <span class="hljs-number">148</span>, <br>       <span class="hljs-number">136</span>, <span class="hljs-number">133</span>, <span class="hljs-number">191</span>, <span class="hljs-number">134</span>, <span class="hljs-number">140</span>, <span class="hljs-number">129</span>, <span class="hljs-number">135</span>, <span class="hljs-number">191</span>, <span class="hljs-number">65</span>]<br>flag = <span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> key:<br>    flag+=<span class="hljs-built_in">chr</span>((i^<span class="hljs-number">32</span>)-<span class="hljs-number">64</span>)<br><span class="hljs-built_in">print</span>(flag)<br></code></pre></td></tr></table></figure><p>flag{This_is_the_flag_!}</p><h3 id="luck-guy"><a href="#luck-guy" class="headerlink" title="luck_guy"></a>luck_guy</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">for</span> ( i = <span class="hljs-number">0</span>; i &lt;= <span class="hljs-number">4</span>; ++i )<br>  &#123;<br>    <span class="hljs-keyword">switch</span> ( rand() % <span class="hljs-number">200</span> )<br>    &#123;<br>      <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>        <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;OK, it&#x27;s flag:&quot;</span>);<br>        <span class="hljs-built_in">memset</span>(&amp;s, <span class="hljs-number">0</span>, <span class="hljs-number">0x28</span>uLL);<br>        <span class="hljs-built_in">strcat</span>((<span class="hljs-type">char</span> *)&amp;s, f1); <span class="hljs-comment">//f1 = &#x27;GXY&#123;do_not_&#x27;</span><br>        <span class="hljs-built_in">strcat</span>((<span class="hljs-type">char</span> *)&amp;s, &amp;f2);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s&quot;</span>, (<span class="hljs-type">const</span> <span class="hljs-type">char</span> *)&amp;s);<br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Solar not like you&quot;</span>);<br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Solar want a girlfriend&quot;</span>);<br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">case</span> <span class="hljs-number">4</span>:<br>        s = <span class="hljs-string">&#x27;\x7Ffo`guci&#x27;</span>;<br>        v5 = <span class="hljs-number">0</span>;<br>        <span class="hljs-built_in">strcat</span>(&amp;f2, (<span class="hljs-type">const</span> <span class="hljs-type">char</span> *)&amp;s);<br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">case</span> <span class="hljs-number">5</span>:<br>        <span class="hljs-keyword">for</span> ( j = <span class="hljs-number">0</span>; j &lt;= <span class="hljs-number">7</span>; ++j )<br>        &#123;<br>          <span class="hljs-keyword">if</span> ( j % <span class="hljs-number">2</span> == <span class="hljs-number">1</span> )<br>            *(&amp;f2 + j) -= <span class="hljs-number">2</span>;<br>          <span class="hljs-keyword">else</span><br>            --*(&amp;f2 + j);<br>        &#125;<br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">default</span>:<br>        <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;emmm,you can&#x27;t find flag 23333&quot;</span>);<br>        <span class="hljs-keyword">break</span>;<br></code></pre></td></tr></table></figure><p>case 1是将f1和f2合并输出flag</p><p>case 4 是f2和字符串s合并，前面说过小端顺序，s &#x3D; ‘ icug‘of ’ </p><p>case 5 是对f2进行一些运算</p><p>顺序应为case 4 &gt; case 5 &gt; case 1</p><p>写脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">s = <span class="hljs-string">&#x27;icug`of&#x27;</span><br><span class="hljs-built_in">str</span> = <span class="hljs-built_in">list</span>(s)<br>flag = <span class="hljs-string">&#x27;GXY&#123;do_not_&#x27;</span><br><span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(<span class="hljs-built_in">str</span>)):<br><span class="hljs-keyword">if</span>  j % <span class="hljs-number">2</span> == <span class="hljs-number">1</span>:<br>        flag += <span class="hljs-built_in">chr</span>(<span class="hljs-built_in">ord</span>(<span class="hljs-built_in">str</span>[j]) - <span class="hljs-number">2</span>)<br>    <span class="hljs-keyword">else</span>:<br>        flag += <span class="hljs-built_in">chr</span>(<span class="hljs-built_in">ord</span>(<span class="hljs-built_in">str</span>[j]) - <span class="hljs-number">1</span>)<br><span class="hljs-built_in">print</span>(flag)<br></code></pre></td></tr></table></figure><p>GXY{do_not_hate_me}</p><hr><p>Day3 - 数据存储特性，多段算法分析，关键函数查看，脚本编写</p>]]></content>
    
    
    <categories>
      
      <category>Reverse Learn</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Reverse</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Reverse Learning - Day2</title>
    <link href="/2022/03/28/Reverse-Learning-Day2/"/>
    <url>/2022/03/28/Reverse-Learning-Day2/</url>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><h1 id="BUUCTF"><a href="#BUUCTF" class="headerlink" title="BUUCTF"></a>BUUCTF</h1><h3 id="新年快乐"><a href="#新年快乐" class="headerlink" title="新年快乐"></a>新年快乐</h3><p>file文件发现有壳，使用upx进行脱壳</p><p><img src="https://m4cre-1309984225.cos.ap-beijing.myqcloud.com/typora/202203281944086.png"></p><p>IDA打开，分析main函数，发现flag是Str2，strcpy就是把字符串赋给Str2<br><img src="https://m4cre-1309984225.cos.ap-beijing.myqcloud.com/typora/202203281951401.png"></p><p>flag{HappyNewYear!}</p><h3 id="xor"><a href="#xor" class="headerlink" title="xor"></a>xor</h3><p>看题目知道是异或，打开main函数，逻辑是字符和上一位进行异或</p><p><img src="https://m4cre-1309984225.cos.ap-beijing.myqcloud.com/typora/202203282005799.png"></p><p>把所有的数据统一成ascii码，编写脚本</p><p><img src="https://m4cre-1309984225.cos.ap-beijing.myqcloud.com/typora/202203282009891.png"></p><figure class="highlight python"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><pre><code class="hljs python">a=[<span class="hljs-number">0x66</span>,<span class="hljs-number">0x0A</span>,<span class="hljs-number">0x6b</span>,<span class="hljs-number">0x0C</span>,<span class="hljs-number">0x77</span>,<span class="hljs-number">0x26</span>,<br>   <span class="hljs-number">0x4f</span>,<span class="hljs-number">0x2e</span>,<span class="hljs-number">0x40</span>,<span class="hljs-number">0x11</span>,<span class="hljs-number">0x78</span>,<span class="hljs-number">0x0D</span>,<br>   <span class="hljs-number">0x5a</span>,<span class="hljs-number">0x3b</span>,<span class="hljs-number">0x55</span>,<span class="hljs-number">0x11</span>,<br>   <span class="hljs-number">0x70</span>,<span class="hljs-number">0x19</span>,<span class="hljs-number">0x46</span>,<span class="hljs-number">0x1F</span>,<span class="hljs-number">0x76</span>,<span class="hljs-number">0x22</span>,<br>   <span class="hljs-number">0x4d</span>,<span class="hljs-number">0x23</span>,<span class="hljs-number">0x44</span>,<span class="hljs-number">0x0E</span>,<span class="hljs-number">0x67</span>,<br>   <span class="hljs-number">0x06</span>,<span class="hljs-number">0x68</span>,<span class="hljs-number">0x0F</span>,<span class="hljs-number">0x47</span>,<span class="hljs-number">0x32</span>,<span class="hljs-number">0x4f</span>]<br>s=<span class="hljs-string">&#x27; &#x27;</span><br>s+=<span class="hljs-string">&#x27;f&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-built_in">len</span>(a)):<br>    s+=<span class="hljs-built_in">chr</span>(a[i]^a[i-<span class="hljs-number">1</span>])<br><span class="hljs-built_in">print</span>(s)<br></code></pre></td></tr></table></figure><p>flag{QianQiuWanDai_YiTongJiangHu}</p><h3 id="helloword"><a href="#helloword" class="headerlink" title="helloword"></a>helloword</h3><p>apk文件，扔jadx跑一下，main函数里直接看到flag</p><p><img src="https://m4cre-1309984225.cos.ap-beijing.myqcloud.com/typora/202203282027394.png"></p><p>flag{7631a988259a00816deda84afb29430a}</p><h3 id="reverse3"><a href="#reverse3" class="headerlink" title="reverse3"></a>reverse3</h3><p>IDA查看伪代码</p><p><img src="https://m4cre-1309984225.cos.ap-beijing.myqcloud.com/typora/202203282034735.png"></p><p>输入的字符串经过sub_4110BE运算赋给Destination，查看算法发现是Base64加密</p><p><img src="https://m4cre-1309984225.cos.ap-beijing.myqcloud.com/typora/202203282038706.png"></p><p>再查看一下str2的内容</p><p><img src="https://m4cre-1309984225.cos.ap-beijing.myqcloud.com/typora/202203282046979.png"></p><p>回头分析main函数发现Destination每一位加j，开始写脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> base64<br><span class="hljs-built_in">str</span>=<span class="hljs-string">&#x27;e3nifIH9b_C@n@dH&#x27;</span><br>flag=<span class="hljs-string">&#x27; &#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(<span class="hljs-built_in">str</span>)):<br>    flag+=<span class="hljs-built_in">chr</span>(<span class="hljs-built_in">ord</span>(<span class="hljs-built_in">str</span>[i])-i)<br>flag=base64.b64decode(flag)<br><span class="hljs-built_in">print</span>(flag)<br></code></pre></td></tr></table></figure><p>flag{i_l0ve_you}</p><hr><p>Day2 - upx简单脱壳，了解apk逆向，学习脚本编写，分析基础算法</p>]]></content>
    
    
    <categories>
      
      <category>Reverse Learn</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Reverse</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MarkDown图床搭建及Typora图片自动上传</title>
    <link href="/2022/03/28/MarkDown-%E5%9B%BE%E5%BA%8A%E6%90%AD%E5%BB%BA/"/>
    <url>/2022/03/28/MarkDown-%E5%9B%BE%E5%BA%8A%E6%90%AD%E5%BB%BA/</url>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>搭建gitee仓库作为Hexo博客图床</p><p>实现Typora利用PicGo自动上传图片</p><h3 id="软件"><a href="#软件" class="headerlink" title="软件"></a>软件</h3><p>Typora - <a href="https://typora.io/">https://Typora.io</a> -</p><p>PicGo - <a href="https://github.com/Molunerfinn/PicGo">https://github.com/Molunerfinn/PicGo</a> -</p><h3 id="Gitee"><a href="#Gitee" class="headerlink" title="Gitee"></a>Gitee</h3><ol><li><p>创建一个公开的空仓库作为图床</p></li><li><p>生成私人令牌，权限勾选projects即可</p></li></ol><h3 id="PicGo"><a href="#PicGo" class="headerlink" title="PicGo"></a>PicGo</h3><ol><li><p>下载gitee-uploader插件</p><p><img src="https://m4cre-1309984225.cos.ap-beijing.myqcloud.com/typora/202203272325492.png"></p></li><li><p>PicGo设置 &gt; gitee &gt; 添加repo为图床地址 &gt; 添加token为私人令牌</p></li></ol><p><img src="https://m4cre-1309984225.cos.ap-beijing.myqcloud.com/typora/202203272331262.png"></p><ol start="3"><li>设置中打开时间戳命名，防止图片地址指向错误</li></ol><h3 id="Typora"><a href="#Typora" class="headerlink" title="Typora"></a>Typora</h3><ol><li>图像设置</li></ol><p><img src="https://m4cre-1309984225.cos.ap-beijing.myqcloud.com/typora/202203272338969.png"></p><ol start="2"><li>验证图片上传选项，gitee仓库看到图片即成功</li></ol><h3 id="Hint"><a href="#Hint" class="headerlink" title="Hint"></a>Hint</h3><ul><li><p>gitee仓库一定要是公开的，私有仓库图片上传无法正常显示</p></li><li><p>当图片超过1MB时需要登陆Gitee账号查看，但不影响文章显示</p></li><li><p>添加图床链接无法显示图片时，在title下加入</p><p> <code>&lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;/&gt;</code></p><p>referrer策略防盗链机制，详情参阅 - <a href="https://segmentfault.com/a/1190000017896469">https://segmentfault.com/a/1190000017896469</a> -</p></li></ul><hr><p>部署完成后，在Typora中添加图片即可自动上传图床永久保存</p>]]></content>
    
    
    <categories>
      
      <category>MarkDown</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MarkDown</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Reverse Learning - Day1</title>
    <link href="/2022/03/27/Reverse-Learning-Day1/"/>
    <url>/2022/03/27/Reverse-Learning-Day1/</url>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><h1 id="BUUCTF"><a href="#BUUCTF" class="headerlink" title="BUUCTF"></a>BUUCTF</h1><h3 id="easyre"><a href="#easyre" class="headerlink" title="easyre"></a>easyre</h3><p>file文件查看位数</p><p><img src="https://m4cre-1309984225.cos.ap-beijing.myqcloud.com/typora/image-20220327021402357.png"></p><p>IDA打开文件，直接找到flag</p><p><img src="https://m4cre-1309984225.cos.ap-beijing.myqcloud.com/typora/image-20220327021703366.png"></p><p>或者grep过滤一下flag</p><p><img src="https://m4cre-1309984225.cos.ap-beijing.myqcloud.com/typora/image-20220327022148365.png"></p><h3 id="reverse1"><a href="#reverse1" class="headerlink" title="reverse1"></a>reverse1</h3><p>file一下文件，查看位数</p><p><img src="https://m4cre-1309984225.cos.ap-beijing.myqcloud.com/typora/image-20220327022429991.png"></p><p>IDA打开文件 查找字符串(shitf+f12)</p><p><img src="https://m4cre-1309984225.cos.ap-beijing.myqcloud.com/typora/image-20220327023830661.png"></p><p>F5观察观察伪代码(养成修改函数名的习惯)，并转译字符(R)，是将‘o’替换为‘0’</p><p><img src="https://m4cre-1309984225.cos.ap-beijing.myqcloud.com/typora/image-20220327024017959.png"></p><p>从而得到flag{hell0_w0rld}</p><h3 id="reverse2"><a href="#reverse2" class="headerlink" title="reverse2"></a>reverse2</h3><p>file一下文件，发现是ELF格式</p><p><img src="https://m4cre-1309984225.cos.ap-beijing.myqcloud.com/typora/image-20220327024408439.png"></p><p>查看字符串发现.data:0000000000601081    00000011    C    hacking_for_fun}</p><p>查看伪代码，是将所有的‘i’或‘r’替换为1</p><p><img src="https://m4cre-1309984225.cos.ap-beijing.myqcloud.com/typora/image-20220327025044547.png"></p><p>获得flag{hack1ng_fo1_fun}</p><h3 id="内涵的软件"><a href="#内涵的软件" class="headerlink" title="内涵的软件"></a>内涵的软件</h3><p>IDA打开可以直接看到，grep直接一遍过</p><p><img src="https://m4cre-1309984225.cos.ap-beijing.myqcloud.com/typora/image-20220327025434423.png"></p><p>改个格式直接提交flag{49d3c93df25caad81232130f3d2ebfad}</p><hr><p> Day1 - 学习file用法，运用IDA及快捷键，养成修改函数名习惯</p>]]></content>
    
    
    <categories>
      
      <category>Reverse Learn</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Reverse</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
